spring.application.name=online-event-ticketing
spring.datasource.url=jdbc:postgresql://localhost:5432/oetp
spring.datasource.username=postgres
spring.datasource.password=postgres
spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true

# Redis Cache Setup
#spring.cache.type=redis
#spring.redis.host=${SPRING_REDIS_HOST:localhost}
#spring.redis.port=${SPRING_REDIS_PORT:6379}
#spring.cache.redis.time-to-live=600000
#spring.cache.redis.enable-statistics=true
#spring.data.redis.repositories.enabled=false

# Optional: Log cache behavior
logging.level.org.springframework.cache=DEBUG
logging.level.org.springframework.data.redis=DEBUG

# Resilience4j RateLimiter
resilience4j.ratelimiter.instances.booking.limit-for-period=100
resilience4j.ratelimiter.instances.booking.limit-refresh-period=1s

# Health check endpoints
management.endpoints.web.exposure.include=health
management.endpoint.health.show-details=always

jwt.secret=${JWT_SECRET:Eoqvxcf1AJzV/L4nKd/QN1U6o4Qe/8t3pcHwg9xwIYc=}

spring.kafka.bootstrap-servers=localhost:9092
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer=org.springframework.kafka.support.serializer.JsonSerializer
spring.kafka.consumer.group-id=oetp-bookings
spring.kafka.consumer.auto-offset-reset=earliest
spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.value-deserializer=org.springframework.kafka.support.serializer.JsonDeserializer
spring.kafka.consumer.properties.spring.json.trusted.packages=*
